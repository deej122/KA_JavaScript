// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('kajsApp', ['ngRoute', 'ui.codemirror']).config(function($routeProvider, $locationProvider, $httpProvider) {
    $locationProvider.html5Mode(true);
    return $routeProvider.when('/', {
      templateUrl: '/views/partials/main.html',
      controller: 'MainController'
    });
  }).controller('MainController', function($scope, $http) {
    $scope.editorOptions = {
      lineWrapping: true,
      lineNumbers: true,
      mode: 'javascript'
    };
    $scope.jsCode = null;
    return $scope.parseIt = function() {
      $scope.body = {
        jsCode: $scope.jsCode
      };
      return $http.post('/api/controller/parse', $scope.body).success(function(parsed) {
        var declaration, nested_declaration, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len13, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _s, _t, _u, _v;
        $scope.parsedCode = parsed;
        if ($scope.needVariable === true) {
          _ref = $scope.parsedCode.ast.body;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            declaration = _ref[_i];
            if (declaration.type === "VariableDeclaration") {
              $scope.variableError = void 0;
              break;
            } else {
              $scope.variableError = "You must declare a variable in your code!";
            }
          }
        }
        if ($scope.needIf === true) {
          _ref1 = $scope.parsedCode.ast.body;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            declaration = _ref1[_j];
            if (declaration.type === "IfStatement") {
              $scope.ifError = void 0;
              if ($scope.needForInIf === true) {
                if (declaration.consequent.body.length > 0) {
                  _ref2 = declaration.consequent.body;
                  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                    nested_declaration = _ref2[_k];
                    if (nested_declaration.type === "ForStatement") {
                      $scope.nestedForIfError = void 0;
                      break;
                    } else {
                      $scope.nestedForIfError = "You must add a for loop within your if statement!";
                    }
                  }
                } else {
                  $scope.nestedForIfError = "You must add a for loop within your if statement!";
                }
              }
              if ($scope.needWhileInIf === true) {
                if (declaration.consequent.body.length > 0) {
                  _ref3 = declaration.consequent.body;
                  for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
                    nested_declaration = _ref3[_l];
                    if (nested_declaration.type === "WhileStatement") {
                      $scope.nestedWhileIfError = void 0;
                      break;
                    } else {
                      $scope.nestedWhileIfError = "You must add a while loop within your if statement!";
                    }
                  }
                } else {
                  $scope.nestedWhileIfError = "You must add a while loop within your if statement!";
                }
              }
              break;
            } else {
              $scope.ifError = "You must use an if statement in your code!";
            }
          }
        }
        if ($scope.needFor === true) {
          _ref4 = $scope.parsedCode.ast.body;
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            declaration = _ref4[_m];
            if (declaration.type === "ForStatement") {
              $scope.forError = void 0;
              if ($scope.needIfInFor === true) {
                if (declaration.body.body.length > 0) {
                  _ref5 = declaration.body.body;
                  for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
                    nested_declaration = _ref5[_n];
                    if (nested_declaration.type === "IfStatement") {
                      $scope.nestedIfForError = void 0;
                      break;
                    } else {
                      $scope.nestedIfForError = "You must add an if statement within your for loop!";
                    }
                  }
                } else {
                  $scope.nestedIfForError = "You must add an if statement within your for loop!";
                }
              }
              if ($scope.needWhileInFor === true) {
                if (declaration.body.body.length > 0) {
                  _ref6 = declaration.body.body;
                  for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
                    nested_declaration = _ref6[_o];
                    if (nested_declaration.type === "WhileStatement") {
                      $scope.nestedWhileForError = void 0;
                      break;
                    } else {
                      $scope.nestedWhileForError = "You must add a while loop within your for loop!";
                    }
                  }
                } else {
                  $scope.nestedWhileForError = "You must add a while loop within your for loop!";
                }
              }
              break;
            } else {
              $scope.forError = "You must use a for loop in your code!";
            }
          }
        }
        if ($scope.needWhile === true) {
          _ref7 = $scope.parsedCode.ast.body;
          for (_p = 0, _len7 = _ref7.length; _p < _len7; _p++) {
            declaration = _ref7[_p];
            if (declaration.type === "WhileStatement") {
              $scope.whileError = void 0;
              if ($scope.needIfInWhile === true) {
                if (declaration.body.body.length > 0) {
                  _ref8 = declaration.body.body;
                  for (_q = 0, _len8 = _ref8.length; _q < _len8; _q++) {
                    nested_declaration = _ref8[_q];
                    if (nested_declaration.type === "IfStatement") {
                      $scope.nestedIfWhileError = void 0;
                      break;
                    } else {
                      $scope.nestedIfWhileError = "You must add an if statement within your while loop!";
                    }
                  }
                } else {
                  $scope.nestedIfWhileError = "You must add an if statement within your while loop!";
                }
              }
              if ($scope.needForInWhile === true) {
                if (declaration.body.body.length > 0) {
                  _ref9 = declaration.body.body;
                  for (_r = 0, _len9 = _ref9.length; _r < _len9; _r++) {
                    nested_declaration = _ref9[_r];
                    if (nested_declaration.type === "ForStatement") {
                      $scope.nestedForWhileError = void 0;
                      break;
                    } else {
                      $scope.nestedForWhileError = "You must add a for loop within your while loop!";
                    }
                  }
                } else {
                  $scope.nestedForWhileError = "You must add a for loop within your while loop!";
                }
              }
              break;
            } else {
              $scope.whileError = "You must use a while loop in your code!";
            }
          }
        }
        if ($scope.noVariable === true) {
          _ref10 = $scope.parsedCode.ast.body;
          for (_s = 0, _len10 = _ref10.length; _s < _len10; _s++) {
            declaration = _ref10[_s];
            if (declaration.type === "VariableDeclaration") {
              $scope.variableError = "You must not declare any variables in your code!";
              break;
            } else {
              $scope.variableError = void 0;
            }
          }
        }
        if ($scope.noIf === true) {
          _ref11 = $scope.parsedCode.ast.body;
          for (_t = 0, _len11 = _ref11.length; _t < _len11; _t++) {
            declaration = _ref11[_t];
            if (declaration.type === "IfStatement") {
              $scope.ifError = "You must not use an if statement in your code!";
              break;
            } else {
              $scope.ifError = void 0;
            }
          }
        }
        if ($scope.noFor === true) {
          _ref12 = $scope.parsedCode.ast.body;
          for (_u = 0, _len12 = _ref12.length; _u < _len12; _u++) {
            declaration = _ref12[_u];
            if (declaration.type === "ForStatement") {
              $scope.forError = "You must not use a for loop in your code!";
              break;
            } else {
              $scope.forError = void 0;
            }
          }
        }
        if ($scope.noWhile === true) {
          _ref13 = $scope.parsedCode.ast.body;
          for (_v = 0, _len13 = _ref13.length; _v < _len13; _v++) {
            declaration = _ref13[_v];
            if (declaration.type === "WhileStatement") {
              $scope.whileError = "You must not use a while loop in your code!";
              break;
            } else {
              $scope.whileError = void 0;
            }
          }
        }
        if ($scope.variableError === void 0 && $scope.ifError === void 0 && $scope.forError === void 0 && $scope.whileError === void 0 && $scope.nestedForIfError === void 0 && $scope.nestedWhileIfError === void 0 && $scope.nestedIfForError === void 0 && $scope.nestedWhileForError === void 0 && $scope.nestedIfWhileError === void 0 && $scope.nestedForWhileError === void 0) {
          $scope.successMessage = "You've successfully met all specifications for this example. You should still check your code for syntax errors, but good work!";
        } else {
          $scope.successMessage = void 0;
        }
      });
    };
  });

}).call(this);
