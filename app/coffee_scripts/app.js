// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  angular.module('kajsApp', ['ngRoute', 'ui.codemirror']).config(function($routeProvider, $locationProvider, $httpProvider) {
    $locationProvider.html5Mode(true);
    return $routeProvider.when('/', {
      templateUrl: '/views/partials/main.html',
      controller: 'MainController'
    });
  }).controller('MainController', function($scope, $http) {
    $scope.editorOptions = {
      lineWrapping: true,
      lineNumbers: true,
      mode: 'javascript'
    };
    $scope.jsCode = null;
    return $scope.parseIt = function() {
      $scope.body = {
        jsCode: $scope.jsCode
      };
      console.log($scope.jsCode);
      console.log(typeof $scope.jsCode);
      return $http.post('/api/controller/parse', $scope.body).success(function(parsed) {
        var declaration, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        console.log(parsed.ast.body);
        $scope.parsedCode = parsed;
        if ($scope.needVariable === true) {
          _ref = $scope.parsedCode.ast.body;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            declaration = _ref[_i];
            if (declaration.type === "VariableDeclaration") {
              $scope.variableError = void 0;
              break;
            } else {
              $scope.variableError = "You must declare a variable in your code!";
            }
          }
        }
        if ($scope.needIf === true) {
          _ref1 = $scope.parsedCode.ast.body;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            declaration = _ref1[_j];
            if (declaration.type === "IfStatement") {
              $scope.ifError = void 0;
              break;
            } else {
              $scope.ifError = "You must use an if statement in your code!";
            }
          }
        }
        if ($scope.needFor === true) {
          _ref2 = $scope.parsedCode.ast.body;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            declaration = _ref2[_k];
            if (declaration.type === "ForStatement") {
              $scope.forError = void 0;
              break;
            } else {
              $scope.forError = "You must use a for loop in your code!";
            }
          }
        }
        if ($scope.noVariable === true) {
          _ref3 = $scope.parsedCode.ast.body;
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            declaration = _ref3[_l];
            if (declaration.type === "VariableDeclaration") {
              console.log(declaration.type === "VariableDeclaration");
              $scope.variableError = "You must not declare any variables in your code!";
              break;
            } else {
              $scope.variableError = void 0;
            }
          }
        }
        if ($scope.noIf === true) {
          _ref4 = $scope.parsedCode.ast.body;
          for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
            declaration = _ref4[_m];
            if (declaration.type === "IfStatement") {
              $scope.ifError = "You must not use an if statement in your code!";
              break;
            } else {
              $scope.ifError = void 0;
            }
          }
        }
        if ($scope.noFor === true) {
          _ref5 = $scope.parsedCode.ast.body;
          for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
            declaration = _ref5[_n];
            if (declaration.type === "ForStatement") {
              $scope.forError = "You must not use a for loop in your code!";
              break;
            } else {
              $scope.forError = void 0;
            }
          }
        }
        if ($scope.variableError === void 0 && $scope.ifError === void 0 && $scope.forError === void 0) {
          $scope.successMessage = "You've successfully met all specifications for this example. You should still check your code for syntax errors, but good work!";
        } else {
          $scope.successMessage = void 0;
        }
      });
    };
  });

}).call(this);
